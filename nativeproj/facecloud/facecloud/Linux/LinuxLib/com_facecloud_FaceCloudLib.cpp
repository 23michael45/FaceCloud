/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_facecloud_FaceCloudLib.h"
#include "FaceCloudLib.h"
#include "json/json.h"
/* Header for class com_facecloud_FaceCloudLib */

#ifdef __cplusplus
extern "C" {
#endif


	FaceCloudLib gFaceCloudLib;

	void SaveFile(string& s, string& path)
	{
		ofstream write;

		write.open(path.c_str(), ios::out | ios::binary);
		write.write(s.c_str(), s.length());
		write.close();
	}
	void SaveJsonFile(Json::Value jvalue, string& path)
	{
		Json::StreamWriterBuilder  builder;
		builder.settings_["commentStyle"] = "All";
		std::string s = Json::writeString(builder, jvalue);

		SaveFile(s, path);
	}
	Json::Value LoadJsonValueFromFile(string filepath)
	{
		Json::CharReaderBuilder rbuilder;
		rbuilder["collectComments"] = false;
		std::string errs;
		Json::Value root;
		std::ifstream ifs;
		ifs.open(filepath);
		bool ok = Json::parseFromStream(rbuilder, ifs, &root, &errs);
		ifs.close();
		return root;
	}
	string LoadJsonStringFromFile(string filepath)
	{
		Json::Value root = LoadJsonValueFromFile(filepath);

		Json::StreamWriterBuilder  builder;
		builder.settings_["commentStyle"] = "All";
		std::string s = Json::writeString(builder, root);
		return s;
	}
	std::string jstring2string(JNIEnv *env, jstring jStr) {
		if (!jStr)
			return "";

		const jclass stringClass = env->GetObjectClass(jStr);
		const jmethodID getBytes = env->GetMethodID(stringClass, "getBytes", "(Ljava/lang/String;)[B");
		const jbyteArray stringJbytes = (jbyteArray)env->CallObjectMethod(jStr, getBytes, env->NewStringUTF("UTF-8"));

		size_t length = (size_t)env->GetArrayLength(stringJbytes);
		jbyte* pBytes = env->GetByteArrayElements(stringJbytes, NULL);

		std::string ret = std::string((char *)pBytes, length);
		env->ReleaseByteArrayElements(stringJbytes, pBytes, JNI_ABORT);

		env->DeleteLocalRef(stringJbytes);
		env->DeleteLocalRef(stringClass);
		return ret;
	}
/*
 * Class:     com_facecloud_FaceCloudLib
 * Method:    Init
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_facecloud_FaceCloudLib_Init	(JNIEnv *, jobject)
{
	return gFaceCloudLib.Init();
}

/*
 * Class:     com_facecloud_FaceCloudLib
 * Method:    Calculate
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT jstring JNICALL Java_com_facecloud_FaceCloudLib_Calculate
(JNIEnv * env, jobject jobj, jstring jmodelID, jstring jjsonFace, jstring jphotoPath, jstring jphotoPathOut)
{
	string rt;
	string photoPathOut = jstring2string(env, jphotoPathOut);
	gFaceCloudLib.Calculate(jstring2string(env, jmodelID), jstring2string(env, jjsonFace), jstring2string(env, jphotoPath), photoPathOut,rt);
	return env->NewStringUTF(rt.c_str());
}

/*
 * Class:     com_facecloud_FaceCloudLib
 * Method:    LoadJsonStringFromFile
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_facecloud_FaceCloudLib_LoadJsonStringFromFile
(JNIEnv * env, jobject jobj, jstring filepath)
{
	string rt = LoadJsonStringFromFile(jstring2string(env, filepath));
	return env->NewStringUTF(rt.c_str());
}

/*
 * Class:     com_facecloud_FaceCloudLib
 * Method:    SaveFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_facecloud_FaceCloudLib_SaveFile
(JNIEnv * env, jobject jobj, jstring js, jstring jpath)
{
	string s = jstring2string(env, js);
	string path = jstring2string(env, jpath);
	SaveFile(s,path);
}

#ifdef __cplusplus
}
#endif
